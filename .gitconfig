[user]
	name = Karel Fiala
	email = fiala.karel@gmail.com

[push]
	default = simple

[pull]
	rebase = true

[color]
        ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
#	added = green
#	changed = yellow
#	untracked = cyan

[core]
        excludesfile = ~/.gitignore

[credential]
	helper = cache --timeout=3600

[alias]
	co = checkout
	br = branch
	c = commit
	st = status -sb
        aa = add --all
	lol = "log --pretty=oneline --abbrev-commit --graph --decorate --date=relative"
	pushall = "!f(){ for i in `git remote`; do printf \"$i: \" ; git push $i; done; };f"
	pullall = "!f(){ for i in `git remote`; do printf \"$i: \" ; git pull $i; done; };f"

        # Shortening aliases
        cob = checkout -b
        f = fetch -p
        p = push
        ba = branch -a
        bd = branch -d
        bD = branch -D
        dc = diff --cached

        # Feature improving aliases
        a = add -p

        # Complex aliases
        plog = log --graph --pretty='format:%C(red)%d%C(reset) %C(yellow)%h%C(reset) %ar %C(green)%aN%C(reset) %s'
        tlog = log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative
        lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
        rank = shortlog -sn --no-merges
        bdm = "!git branch --merged | grep -v '*' | xargs -n 1 git branch -d"

#        f = fetch
        # updates your branch with upstream (if fast-forward is possible)
        ff = !git merge --ff-only `git rev-parse --symbolic-full-name --abbrev-ref=strict HEAD@{u}`
#        fp = fetch --prune
        st = status
        cm = commit
        cma = commit --amend
        cp = cherry-pick
        df = diff
        rb = rebase
        rbi = rebase -i
        rbc = rebase --continue
        rh = reset --hard
        su = submodule update
	ap = add -p
        # graph for current branch
        l  = log --graph --decorate --pretty=oneline --abbrev-commit -20
        # graph for all branches
        ll = log --graph --decorate --pretty=oneline --abbrev-commit --all
        # log for current branch showing diffs (-m is for showing mergecommits too)
        ld = log -p -m
        # log for current branch showing summary of changed files (-m is for showing mergecommits too)
        ls = log --stat -m
        # number of commits for each person
        stats = shortlog -n -s --no-merges
        # remove remote branch (remote must be named origin), usage: git rmb test
#        rmb = !sh -c 'git push origin :$1' -
        # shows local > tracked remote
        brt = for-each-ref --format=\"%(refname:short) > %(upstream:short)\" refs/heads
        # get upstream tracked branch or error
        brtracked = rev-parse --symbolic-full-name --abbrev-ref=strict HEAD@{u}
        # commit all changes to a WIP commit
        wip = !git add $(git rev-parse --show-toplevel) && git commit -m WIP

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
